// <auto-generated />
using System;
using JAP.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JAP.Database.Migrations
{
    [DbContext(typeof(JAPContext))]
    [Migration("20210905222014_PhotoIdChangedToNullableInActorsTable")]
    partial class PhotoIdChangedToNullableInActorsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("JAP.Core.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(5000),
                            FirstName = "Johnny",
                            IsDeleted = false,
                            LastName = "Depp",
                            PhotoId = -1
                        },
                        new
                        {
                            Id = -2,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6270),
                            FirstName = "Angelina",
                            IsDeleted = false,
                            LastName = "Jolie",
                            PhotoId = -2
                        },
                        new
                        {
                            Id = -3,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6278),
                            FirstName = "Tom",
                            IsDeleted = false,
                            LastName = "Hanks",
                            PhotoId = -3
                        },
                        new
                        {
                            Id = -4,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6284),
                            FirstName = "Natalie",
                            IsDeleted = false,
                            LastName = "Portman",
                            PhotoId = -4
                        },
                        new
                        {
                            Id = -5,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6289),
                            FirstName = "Scarlett",
                            IsDeleted = false,
                            LastName = "Johansson",
                            PhotoId = -5
                        },
                        new
                        {
                            Id = -6,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6296),
                            FirstName = "Brad",
                            IsDeleted = false,
                            LastName = "Pitt",
                            PhotoId = -6
                        },
                        new
                        {
                            Id = -7,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6301),
                            FirstName = "Anne",
                            IsDeleted = false,
                            LastName = "Hathaway",
                            PhotoId = -12
                        },
                        new
                        {
                            Id = -8,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6307),
                            FirstName = "Denzel",
                            IsDeleted = false,
                            LastName = "Washington",
                            PhotoId = -13
                        },
                        new
                        {
                            Id = -9,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6313),
                            FirstName = "Halle",
                            IsDeleted = false,
                            LastName = "Berry",
                            PhotoId = -14
                        },
                        new
                        {
                            Id = -10,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 422, DateTimeKind.Local).AddTicks(6319),
                            FirstName = "Will",
                            IsDeleted = false,
                            LastName = "Smith",
                            PhotoId = -15
                        });
                });

            modelBuilder.Entity("JAP.Core.Entities.ActorsMovies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorsInMovies");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ActorId = -1,
                            MovieId = -1
                        },
                        new
                        {
                            Id = -2,
                            ActorId = -2,
                            MovieId = -1
                        },
                        new
                        {
                            Id = -3,
                            ActorId = -2,
                            MovieId = -2
                        },
                        new
                        {
                            Id = -4,
                            ActorId = -3,
                            MovieId = -2
                        },
                        new
                        {
                            Id = -5,
                            ActorId = -1,
                            MovieId = -3
                        },
                        new
                        {
                            Id = -6,
                            ActorId = -5,
                            MovieId = -3
                        },
                        new
                        {
                            Id = -7,
                            ActorId = -6,
                            MovieId = -4
                        },
                        new
                        {
                            Id = -8,
                            ActorId = -7,
                            MovieId = -4
                        },
                        new
                        {
                            Id = -9,
                            ActorId = -8,
                            MovieId = -4
                        },
                        new
                        {
                            Id = -10,
                            ActorId = -9,
                            MovieId = -5
                        },
                        new
                        {
                            Id = -11,
                            ActorId = -10,
                            MovieId = -5
                        },
                        new
                        {
                            Id = -12,
                            ActorId = -1,
                            MovieId = -6
                        },
                        new
                        {
                            Id = -13,
                            ActorId = -2,
                            MovieId = -6
                        },
                        new
                        {
                            Id = -14,
                            ActorId = -3,
                            MovieId = -7
                        },
                        new
                        {
                            Id = -15,
                            ActorId = -4,
                            MovieId = -7
                        },
                        new
                        {
                            Id = -16,
                            ActorId = -5,
                            MovieId = -8
                        },
                        new
                        {
                            Id = -17,
                            ActorId = -6,
                            MovieId = -8
                        },
                        new
                        {
                            Id = -18,
                            ActorId = -7,
                            MovieId = -9
                        },
                        new
                        {
                            Id = -19,
                            ActorId = -8,
                            MovieId = -9
                        },
                        new
                        {
                            Id = -20,
                            ActorId = -9,
                            MovieId = -10
                        },
                        new
                        {
                            Id = -21,
                            ActorId = -10,
                            MovieId = -10
                        },
                        new
                        {
                            Id = -22,
                            ActorId = -1,
                            MovieId = -11
                        },
                        new
                        {
                            Id = -23,
                            ActorId = -2,
                            MovieId = -11
                        },
                        new
                        {
                            Id = -24,
                            ActorId = -3,
                            MovieId = -12
                        },
                        new
                        {
                            Id = -25,
                            ActorId = -4,
                            MovieId = -12
                        },
                        new
                        {
                            Id = -26,
                            ActorId = -5,
                            MovieId = -13
                        },
                        new
                        {
                            Id = -27,
                            ActorId = -6,
                            MovieId = -13
                        },
                        new
                        {
                            Id = -28,
                            ActorId = -7,
                            MovieId = -14
                        },
                        new
                        {
                            Id = -29,
                            ActorId = -8,
                            MovieId = -14
                        },
                        new
                        {
                            Id = -30,
                            ActorId = -9,
                            MovieId = -15
                        },
                        new
                        {
                            Id = -31,
                            ActorId = -10,
                            MovieId = -15
                        },
                        new
                        {
                            Id = -32,
                            ActorId = -3,
                            MovieId = -16
                        },
                        new
                        {
                            Id = -33,
                            ActorId = -2,
                            MovieId = -17
                        },
                        new
                        {
                            Id = -34,
                            ActorId = -6,
                            MovieId = -17
                        },
                        new
                        {
                            Id = -35,
                            ActorId = -9,
                            MovieId = -18
                        },
                        new
                        {
                            Id = -36,
                            ActorId = -10,
                            MovieId = -18
                        },
                        new
                        {
                            Id = -37,
                            ActorId = -3,
                            MovieId = -19
                        },
                        new
                        {
                            Id = -38,
                            ActorId = -5,
                            MovieId = -19
                        },
                        new
                        {
                            Id = -39,
                            ActorId = -8,
                            MovieId = -20
                        },
                        new
                        {
                            Id = -40,
                            ActorId = -9,
                            MovieId = -20
                        },
                        new
                        {
                            Id = -41,
                            ActorId = -2,
                            MovieId = -21
                        },
                        new
                        {
                            Id = -42,
                            ActorId = -4,
                            MovieId = -21
                        },
                        new
                        {
                            Id = -43,
                            ActorId = -6,
                            MovieId = -22
                        },
                        new
                        {
                            Id = -44,
                            ActorId = -7,
                            MovieId = -22
                        },
                        new
                        {
                            Id = -45,
                            ActorId = -9,
                            MovieId = -23
                        },
                        new
                        {
                            Id = -46,
                            ActorId = -1,
                            MovieId = -23
                        },
                        new
                        {
                            Id = -47,
                            ActorId = -2,
                            MovieId = -24
                        },
                        new
                        {
                            Id = -48,
                            ActorId = -5,
                            MovieId = -24
                        },
                        new
                        {
                            Id = -49,
                            ActorId = -8,
                            MovieId = -22
                        },
                        new
                        {
                            Id = -50,
                            ActorId = -9,
                            MovieId = -24
                        },
                        new
                        {
                            Id = -51,
                            ActorId = -1,
                            MovieId = -16
                        });
                });

            modelBuilder.Entity("JAP.Core.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8cdd8900-b5a2-41ef-bd55-2a4215f04c48",
                            ConcurrencyStamp = "518a1092-8991-406f-bcce-b13cca6a2ec6",
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 420, DateTimeKind.Local).AddTicks(6140),
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3cf0bbae-1fc5-4ca2-9eb4-1557aed94397",
                            ConcurrencyStamp = "d74a384d-937a-4cdd-be04-65a1ea869b30",
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 420, DateTimeKind.Local).AddTicks(6531),
                            IsDeleted = false,
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "0ee2b0b2-e5f4-4bab-b7aa-bc6d6237efd0",
                            ConcurrencyStamp = "dd314dc5-64c5-42bb-8839-9a943eecd299",
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 420, DateTimeKind.Local).AddTicks(6548),
                            IsDeleted = false,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("JAP.Core.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhotoId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "rOFHG9xvlRKAdXOjUh3J",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "997e3fbb-a914-4260-b8ea-e9daa5f42599",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 404, DateTimeKind.Local).AddTicks(3658),
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LastOnline = new DateTime(2021, 9, 6, 0, 20, 13, 394, DateTimeKind.Local).AddTicks(3874),
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENQ7xiCkYfbO5gBpRWSEj9QFUlH5CQwkbfsC2yBOrdOe8MAFxcrO//0CHTxlloEhtA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "pQVqvZg7tnJYQv93gme9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d43c2c0-9f87-4abb-99c2-4deabdcbe61c",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 412, DateTimeKind.Local).AddTicks(935),
                            EmailConfirmed = false,
                            FirstName = "Moderator",
                            LastName = "Moderator",
                            LastOnline = new DateTime(2021, 9, 6, 0, 20, 13, 404, DateTimeKind.Local).AddTicks(4236),
                            LockoutEnabled = false,
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJSCdG/kuEzuwFt5U+aKDw/6LlyC467iMcCDcylOH4rEh0C/1n61t8HmleuD/TIMg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "moderator"
                        },
                        new
                        {
                            Id = "NsOUTyrRU3CRxdPY06lP",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "681ac9ef-dd94-42b3-be57-42263551c86f",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 419, DateTimeKind.Local).AddTicks(5615),
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "User",
                            LastOnline = new DateTime(2021, 9, 6, 0, 20, 13, 412, DateTimeKind.Local).AddTicks(949),
                            LockoutEnabled = false,
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAELFltfcsghV/kFf9TTRcTg6pGiuDjEYg6kZwdHiDBq95Ts2PyAjSsNzWUJHggH93bw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("JAP.Core.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "rOFHG9xvlRKAdXOjUh3J",
                            RoleId = "8cdd8900-b5a2-41ef-bd55-2a4215f04c48"
                        },
                        new
                        {
                            UserId = "pQVqvZg7tnJYQv93gme9",
                            RoleId = "3cf0bbae-1fc5-4ca2-9eb4-1557aed94397"
                        },
                        new
                        {
                            UserId = "NsOUTyrRU3CRxdPY06lP",
                            RoleId = "0ee2b0b2-e5f4-4bab-b7aa-bc6d6237efd0"
                        });
                });

            modelBuilder.Entity("JAP.Core.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTvShow")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<double>("RatingTotal")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(4214),
                            Description = "A happily married man's life is turned upside down when his wife is killed in a mysterious hit-and-run accident in Tel Aviv.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -7,
                            RatingTotal = 4.0,
                            ReleaseDate = new DateTime(2021, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Hit and Run"
                        },
                        new
                        {
                            Id = -2,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5744),
                            Description = "An organized crime dynasty's aging patriarch transfers control of his clandestine empire to his reluctant son.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -8,
                            RatingTotal = 4.2000000000000002,
                            ReleaseDate = new DateTime(1972, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Godfather"
                        },
                        new
                        {
                            Id = -3,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5754),
                            Description = "Supervillains Harley Quinn, Bloodsport, Peacemaker and a collection of nutty cons at Belle Reve prison join the super-secret, super-shady Task Force X",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -9,
                            RatingTotal = 4.0999999999999996,
                            ReleaseDate = new DateTime(2021, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Suicide Squad"
                        },
                        new
                        {
                            Id = -4,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5761),
                            Description = "Two spies are recruited by an intelligence agency. They pose as a married couple Mr. and Mrs. Smith when they are on their missions.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -10,
                            RatingTotal = 4.7000000000000002,
                            ReleaseDate = new DateTime(2005, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mr and Mrs Smith"
                        },
                        new
                        {
                            Id = -5,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5767),
                            Description = "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -11,
                            RatingTotal = 5.0,
                            ReleaseDate = new DateTime(2008, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Dark Knight"
                        },
                        new
                        {
                            Id = -6,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5773),
                            Description = "For the first time in the cinematic history of Spider-Man, our friendly neighborhood hero is unmasked and no longer able to separate his normal life from the high-stakes of being a Super Hero.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -18,
                            RatingTotal = 3.0,
                            ReleaseDate = new DateTime(2021, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spider Man: No Way Home"
                        },
                        new
                        {
                            Id = -7,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5780),
                            Description = "Based on Disneyland's theme park ride where a small riverboat takes a group of travelers through a jungle filled with dangerous animals and reptiles but with a supernatural element.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -20,
                            RatingTotal = 3.8999999999999999,
                            ReleaseDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Jungle Cruise"
                        },
                        new
                        {
                            Id = -8,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5786),
                            Description = "Following a tragic car accident in Greece, an American tourist finds himself at the center of a dangerous political conspiracy and on the run for his life.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -19,
                            RatingTotal = 3.7999999999999998,
                            ReleaseDate = new DateTime(2021, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Beckett"
                        },
                        new
                        {
                            Id = -9,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5792),
                            Description = "A couple meets up with another couple while on vacation in Mexico, but their friendship takes an awkward turn when they get back home.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -16,
                            RatingTotal = 3.5499999999999998,
                            ReleaseDate = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Vacation Friends"
                        },
                        new
                        {
                            Id = -10,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5798),
                            Description = "A faded television actor and his stunt double strive to achieve fame and success in the final years of Hollywood's Golden Age in 1969 Los Angeles.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -21,
                            RatingTotal = 5.0,
                            ReleaseDate = new DateTime(2019, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Once Upon A Time... In Hollywood"
                        },
                        new
                        {
                            Id = -11,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5805),
                            Description = "A truffle hunter who lives alone in the Oregonian wilderness must return to his past in Portland in search of his beloved foraging pig after she is kidnapped.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -17,
                            RatingTotal = 2.8999999999999999,
                            ReleaseDate = new DateTime(2021, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pig"
                        },
                        new
                        {
                            Id = -12,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5812),
                            Description = "The plot follows H, a cold and mysterious character working at a cash truck company responsible for moving hundreds of millions of dollars around Los Angeles each week.",
                            IsDeleted = false,
                            IsTvShow = false,
                            PhotoId = -22,
                            RatingTotal = 4.0999999999999996,
                            ReleaseDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wrath of Man"
                        },
                        new
                        {
                            Id = -13,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(5818),
                            Description = "A high school chemistry teacher diagnosed with inoperable lung cancer turns to manufacturing and selling methamphetamine in order to secure his family's future.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -23,
                            RatingTotal = 4.0,
                            ReleaseDate = new DateTime(2008, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Breaking bad"
                        },
                        new
                        {
                            Id = -14,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6117),
                            Description = "An anthology series centering on different characters and locations, including a house with a murderous past, an insane asylum, a witch coven, a freak show circus, a haunted hotel, and much more.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -24,
                            RatingTotal = 4.2999999999999998,
                            ReleaseDate = new DateTime(2011, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "American Horror Story"
                        },
                        new
                        {
                            Id = -15,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6124),
                            Description = "Follows the personal and professional lives of six twenty to thirty-something-year-old friends living in Manhattan.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -25,
                            RatingTotal = 4.4000000000000004,
                            ReleaseDate = new DateTime(1994, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Friends"
                        },
                        new
                        {
                            Id = -16,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6131),
                            Description = "Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -26,
                            RatingTotal = 4.7000000000000002,
                            ReleaseDate = new DateTime(2013, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Game of Thrones"
                        },
                        new
                        {
                            Id = -17,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6137),
                            Description = "A gangster family epic set in 1900s England, centering on a gang who sew razor blades in the peaks of their caps, and their fierce boss Tommy Shelby.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -27,
                            RatingTotal = 5.0,
                            ReleaseDate = new DateTime(2013, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Peaky Blinders"
                        },
                        new
                        {
                            Id = -18,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6144),
                            Description = "A drama centered on the personal and professional lives of five surgical interns and their supervisors.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -28,
                            RatingTotal = 3.0,
                            ReleaseDate = new DateTime(2005, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Grey's Anatomy"
                        },
                        new
                        {
                            Id = -19,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6150),
                            Description = "New Jersey mob boss Tony Soprano deals with personal and professional issues in his home and business life that affect his mental state, leading him to seek professional psychiatric counseling.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -29,
                            RatingTotal = 3.1000000000000001,
                            ReleaseDate = new DateTime(1999, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Sopranos"
                        },
                        new
                        {
                            Id = -20,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6156),
                            Description = "An animated series that follows the exploits of a super scientist and his not-so-bright grandson.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -30,
                            RatingTotal = 3.2999999999999998,
                            ReleaseDate = new DateTime(2013, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Rick and Morty"
                        },
                        new
                        {
                            Id = -21,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6162),
                            Description = "Sheriff Deputy Rick Grimes wakes up from a coma to learn the world is in ruins and must lead a group of survivors to stay alive.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -31,
                            RatingTotal = 3.3999999999999999,
                            ReleaseDate = new DateTime(2010, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Walking Dead"
                        },
                        new
                        {
                            Id = -22,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6207),
                            Description = "A team of young superheroes combat evil and other perils.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -32,
                            RatingTotal = 3.7000000000000002,
                            ReleaseDate = new DateTime(2018, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Titans"
                        },
                        new
                        {
                            Id = -23,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6213),
                            Description = "Far in a dystopian future, the human race has lost the sense of sight, and society has had to find new ways to interact, build, hunt, and to survive.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -33,
                            RatingTotal = 2.8799999999999999,
                            ReleaseDate = new DateTime(2019, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "See"
                        },
                        new
                        {
                            Id = -24,
                            CreatedById = "rOFHG9xvlRKAdXOjUh3J",
                            DateCreated = new DateTime(2021, 9, 6, 0, 20, 13, 424, DateTimeKind.Local).AddTicks(6220),
                            Description = "Comedy series following the exploits of Det. Jake Peralta and his diverse, lovable colleagues as they police the NYPD's 99th Precinct.",
                            IsDeleted = false,
                            IsTvShow = true,
                            PhotoId = -34,
                            RatingTotal = 2.8999999999999999,
                            ReleaseDate = new DateTime(2013, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Brooklyn 99"
                        });
                });

            modelBuilder.Entity("JAP.Core.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            PublicId = "johnnydepp_iora25",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630676131/johnnydepp_iora25.jpg"
                        },
                        new
                        {
                            Id = -2,
                            PublicId = "angelinajolie_xjbhe7",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630676126/angelinajolie_xjbhe7.jpg"
                        },
                        new
                        {
                            Id = -3,
                            PublicId = "tomhanks_hva0vj",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630676130/tomhanks_hva0vj.jpg"
                        },
                        new
                        {
                            Id = -4,
                            PublicId = "natalieportman_i6vuot",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630676130/natalieportman_i6vuot.jpg"
                        },
                        new
                        {
                            Id = -5,
                            PublicId = "scarlettjohanson_rkcu5u",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630676129/scarlettjohanson_rkcu5u.jpg"
                        },
                        new
                        {
                            Id = -6,
                            PublicId = "bradpitt_zo0pcb",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630676129/bradpitt_zo0pcb.jpg"
                        },
                        new
                        {
                            Id = -12,
                            PublicId = "annehathaway_sgrmnh",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630799748/annehathaway_sgrmnh.jpg"
                        },
                        new
                        {
                            Id = -13,
                            PublicId = "denzelwashington_fu9qmb",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630799745/denzelwashington_fu9qmb.jpg"
                        },
                        new
                        {
                            Id = -14,
                            PublicId = "halleberry_zduavw",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630799738/halleberry_zduavw.jpg"
                        },
                        new
                        {
                            Id = -15,
                            PublicId = "willsmith_eua0te",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630799737/willsmith_eua0te.jpg"
                        },
                        new
                        {
                            Id = -7,
                            PublicId = "hitandrun_ezk6zp",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630675787/hitandrun_ezk6zp.jpg"
                        },
                        new
                        {
                            Id = -8,
                            PublicId = "thegodfather_aumlac",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630675787/thegodfather_aumlac.jpg"
                        },
                        new
                        {
                            Id = -9,
                            PublicId = "suicidesquad_eq8mih",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630675786/suicidesquad_eq8mih.jpg"
                        },
                        new
                        {
                            Id = -10,
                            PublicId = "mrandmrssmith_cstx0w",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630675786/mrandmrssmith_cstx0w.jpg"
                        },
                        new
                        {
                            Id = -11,
                            PublicId = "darkknight_uxmvzc",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630675786/darkknight_uxmvzc.jpg"
                        },
                        new
                        {
                            Id = -16,
                            PublicId = "vacationfriends_dbo6hr",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630871033/vacationfriends_dbo6hr.jpg"
                        },
                        new
                        {
                            Id = -17,
                            PublicId = "pig_byciwz",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630871033/pig_byciwz.jpg"
                        },
                        new
                        {
                            Id = -18,
                            PublicId = "nowayhome_xivojd",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630871035/nowayhome_xivojd.jpg"
                        },
                        new
                        {
                            Id = -19,
                            PublicId = "beckett-2021_nco3v7",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630871035/beckett-2021_nco3v7.jpg"
                        },
                        new
                        {
                            Id = -20,
                            PublicId = "junglecruise_fzefqf",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630871037/junglecruise_fzefqf.jpg"
                        },
                        new
                        {
                            Id = -21,
                            PublicId = "onceuponatimeinhollywood_jymdi7",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630871037/onceuponatimeinhollywood_jymdi7.jpg"
                        },
                        new
                        {
                            Id = -22,
                            PublicId = "wrathofman_xv5ufx",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630871039/wrathofman_xv5ufx.jpg"
                        },
                        new
                        {
                            Id = -23,
                            PublicId = "breakingbad_uxgsek",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872064/breakingbad_uxgsek.jpg"
                        },
                        new
                        {
                            Id = -24,
                            PublicId = "americanhorrorstory_k1w0he",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872066/americanhorrorstory_k1w0he.jpg"
                        },
                        new
                        {
                            Id = -25,
                            PublicId = "friends_dsvbpm",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872066/friends_dsvbpm.jpg"
                        },
                        new
                        {
                            Id = -26,
                            PublicId = "gameofthrones_h0lrog",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872068/gameofthrones_h0lrog.jpg"
                        },
                        new
                        {
                            Id = -27,
                            PublicId = "peakyblinders_jz6bxi",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872070/peakyblinders_jz6bxi.jpg"
                        },
                        new
                        {
                            Id = -28,
                            PublicId = "greys_fczdub",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872074/greys_fczdub.jpg"
                        },
                        new
                        {
                            Id = -29,
                            PublicId = "thesopranos_alr5zq",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872080/thesopranos_alr5zq.jpg"
                        },
                        new
                        {
                            Id = -30,
                            PublicId = "rickandmorty_l5ptrk",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872081/rickandmorty_l5ptrk.jpg"
                        },
                        new
                        {
                            Id = -31,
                            PublicId = "walkingdead_bycpz3",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872085/walkingdead_bycpz3.jpg"
                        },
                        new
                        {
                            Id = -32,
                            PublicId = "titans_hkz342",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872086/titans_hkz342.jpg"
                        },
                        new
                        {
                            Id = -33,
                            PublicId = "see_olpjnm",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872087/see_olpjnm.jpg"
                        },
                        new
                        {
                            Id = -34,
                            PublicId = "brooklynninenine_s2pba3",
                            Url = "https://res.cloudinary.com/doisz5wiz/image/upload/v1630872097/brooklynninenine_s2pba3.jpg"
                        });
                });

            modelBuilder.Entity("JAP.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("RatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RatedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("RatingInt")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("RatedByUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            MovieId = -1,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 3
                        },
                        new
                        {
                            Id = -2,
                            MovieId = -1,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 4
                        },
                        new
                        {
                            Id = -3,
                            MovieId = -2,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 5
                        },
                        new
                        {
                            Id = -4,
                            MovieId = -2,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 4
                        },
                        new
                        {
                            Id = -5,
                            MovieId = -3,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 2
                        },
                        new
                        {
                            Id = -6,
                            MovieId = -3,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 4
                        },
                        new
                        {
                            Id = -7,
                            MovieId = -4,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 3
                        },
                        new
                        {
                            Id = -8,
                            MovieId = -4,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 5
                        },
                        new
                        {
                            Id = -9,
                            MovieId = -5,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 2
                        },
                        new
                        {
                            Id = -10,
                            MovieId = -5,
                            RatedById = "NsOUTyrRU3CRxdPY06lP",
                            RatingInt = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JAP.Core.Entities.Actor", b =>
                {
                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("JAP.Core.Entities.Photo", "ProfileImg")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ProfileImg");
                });

            modelBuilder.Entity("JAP.Core.Entities.ActorsMovies", b =>
                {
                    b.HasOne("JAP.Core.Entities.Actor", "Actor")
                        .WithMany("ActedInMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JAP.Core.Entities.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("JAP.Core.Entities.Identity.AppRole", b =>
                {
                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JAP.Core.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("JAP.Core.Entities.Photo", "UserPhoto")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("UserPhoto");
                });

            modelBuilder.Entity("JAP.Core.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("JAP.Core.Entities.Identity.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JAP.Core.Entities.Movie", b =>
                {
                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("JAP.Core.Entities.Photo", "CoverImage")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("CoverImage");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("JAP.Core.Entities.Rating", b =>
                {
                    b.HasOne("JAP.Core.Entities.Movie", "RatedMovie")
                        .WithMany("MovieRatings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JAP.Core.Entities.Identity.AppUser", "RatedByUser")
                        .WithMany("UserRatings")
                        .HasForeignKey("RatedByUserId");

                    b.Navigation("RatedByUser");

                    b.Navigation("RatedMovie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("JAP.Core.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JAP.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JAP.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JAP.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JAP.Core.Entities.Actor", b =>
                {
                    b.Navigation("ActedInMovies");
                });

            modelBuilder.Entity("JAP.Core.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("JAP.Core.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("UserRatings");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("JAP.Core.Entities.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("MovieRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
